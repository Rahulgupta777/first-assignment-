{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "384a8ff5-83d8-4804-8658-e374a9225666",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q1. Explain with an example each when to use a for loop and a while loop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "595a55e1-5d4d-48bf-a5fe-fcb5e022a671",
   "metadata": {},
   "outputs": [],
   "source": [
    "A1. # A for loop is used when the number of iterations is known beforehand, and you want to perform an action on each element of a collection (e.g., a list, tuple, or string). A for loop is also useful when you want to repeat an action a specific number of times.\n",
    "\n",
    "#For example, consider the following code that uses a for loop to print each element of a list:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8eb6e881-b527-4f5f-adae-4766c308ac31",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "apple\n",
      "banana\n",
      "cherry\n"
     ]
    }
   ],
   "source": [
    "fruits = [\"apple\", \"banana\", \"cherry\"]\n",
    "for fruit in fruits:\n",
    "    print(fruit)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc3aaf4d-0756-480a-982d-bcdf388a038b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#This code will iterate over the elements in the fruits list and print each one to the console.\n",
    "\n",
    "#A while loop is used when you don't know the number of iterations beforehand, and you want to repeat an action until a certain condition is met. For example, if you want to repeatedly ask a user for input until they enter a valid value, you can use a while loop.\n",
    "\n",
    "#Here's an example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0e8191a7-5ae8-4e97-9f95-295dcf0dd312",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "num = 1\n",
    "while num <= 5:\n",
    "    print(num)\n",
    "    num += 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9dd7eb3-e8b8-423a-ae5c-9c89b5bb4001",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q2. Write a python program to print the sum and product of the first 10 natural numbers using for\n",
    "and while loop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6ceedc4f-1eff-40cb-907c-148b6614476e",
   "metadata": {},
   "outputs": [],
   "source": [
    "A2. #Here's a Python program that uses a for loop to calculate the sum and product of the first 10 natural numbers:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "34ab97c7-00e0-4fe6-80e7-ffc64e40496d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using for loop:\n",
      "Sum of first 10 natural numbers: 55\n",
      "Product of first 10 natural numbers: 3628800\n"
     ]
    }
   ],
   "source": [
    "# Using for loop to calculate sum and product of first 10 natural numbers\n",
    "n = 10\n",
    "sum = 0\n",
    "product = 1\n",
    "\n",
    "for i in range(1, n+1):\n",
    "    sum += i\n",
    "    product *= i\n",
    "\n",
    "print(\"Using for loop:\")\n",
    "print(\"Sum of first\", n, \"natural numbers:\", sum)\n",
    "print(\"Product of first\", n, \"natural numbers:\", product)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "befb60d8-a11a-428a-a14f-b5da76552b59",
   "metadata": {},
   "outputs": [],
   "source": [
    "#And here's a Python program that uses a while loop to calculate the sum and product of the first 10 natural numbers:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "aaf45840-1715-4000-92ef-3b9367f04d84",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using while loop:\n",
      "Sum of first 10 natural numbers: 55\n",
      "Product of first 10 natural numbers: 3628800\n"
     ]
    }
   ],
   "source": [
    "# Using while loop to calculate sum and product of first 10 natural numbers\n",
    "n = 10\n",
    "sum = 0\n",
    "product = 1\n",
    "i = 1\n",
    "\n",
    "while i <= n:\n",
    "    sum += i\n",
    "    product *= i\n",
    "    i += 1\n",
    "\n",
    "print(\"Using while loop:\")\n",
    "print(\"Sum of first\", n, \"natural numbers:\", sum)\n",
    "print(\"Product of first\", n, \"natural numbers:\", product)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc522393-153a-4833-b8ac-22d854be7002",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q4. Create a python program to compute the electricity bill for a household.\n",
    "The per-unit charges in rupees are as follows: For the first 100 units, the user will be charged Rs. 4.5 per\n",
    "unit, for the next 100 units, the user will be charged Rs. 6 per unit, and for the next 100 units, the user will\n",
    "be charged Rs. 10 per unit, After 300 units and above the user will be charged Rs. 20 per unit.\n",
    "You are required to take the units of electricity consumed in a month from the user as input."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8ec6ce45-82f8-4106-b418-ac3ee58ce138",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the number of units consumed:  310\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Electricity bill for the month is: Rs. 2250.0\n"
     ]
    }
   ],
   "source": [
    "# Taking input from the user for units consumed\n",
    "units = int(input(\"Enter the number of units consumed: \"))\n",
    "\n",
    "# Calculating electricity bill based on per-unit charges\n",
    "if units <= 100:\n",
    "    bill = units * 4.5\n",
    "elif units <= 200:\n",
    "    bill = 100 * 4.5 + (units - 100) * 6\n",
    "elif units <= 300:\n",
    "    bill = 100 * 4.5 + 100 * 6 + (units - 200) * 10\n",
    "else:\n",
    "    bill = 100 * 4.5 + 100 * 6 + 100 * 10 + (units - 300) * 20\n",
    "\n",
    "# Printing the electricity bill for the household\n",
    "print(\"Electricity bill for the month is: Rs.\", bill)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9733a719-505d-4a2d-af68-b0a20d962740",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q4. Create a list of numbers from 1 to 100. Use for loop and while loop to calculate the cube of each\n",
    "number and if the cube of that number is divisible by 4 or 5 then append that number in a list and print\n",
    "that list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a27caa3-08f1-4e56-8fd2-1521212d7aa0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Here's a Python program that creates a list of numbers from 1 to 100, calculates the cube of each number using a for loop and a while loop, and appends the numbers whose cubes are divisible by 4 or 5 to a new list:\n",
    "# Using for loop:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0830bafb-77ac-4fc2-b446-19a6f3991d7e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using for loop:\n",
      "List of numbers whose cubes are divisible by 4 or 5: [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100]\n"
     ]
    }
   ],
   "source": [
    "# Using for loop to create list of numbers and calculate cube\n",
    "numbers = list(range(1, 101))\n",
    "cubes = []\n",
    "\n",
    "for num in numbers:\n",
    "    cube = num ** 3\n",
    "    if cube % 4 == 0 or cube % 5 == 0:\n",
    "        cubes.append(num)\n",
    "\n",
    "# Printing the list of numbers whose cubes are divisible by 4 or 5\n",
    "print(\"Using for loop:\")\n",
    "print(\"List of numbers whose cubes are divisible by 4 or 5:\", cubes)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30972a6d-c15a-4801-a2c2-435b45f705f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Using while loop:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "bc69263a-f398-4d41-9c51-ea3dfca8837b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using while loop:\n",
      "List of numbers whose cubes are divisible by 4 or 5: [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100]\n"
     ]
    }
   ],
   "source": [
    "# Using while loop to create list of numbers and calculate cube\n",
    "numbers = list(range(1, 101))\n",
    "cubes = []\n",
    "i = 0\n",
    "\n",
    "while i < len(numbers):\n",
    "    cube = numbers[i] ** 3\n",
    "    if cube % 4 == 0 or cube % 5 == 0:\n",
    "        cubes.append(numbers[i])\n",
    "    i += 1\n",
    "\n",
    "# Printing the list of numbers whose cubes are divisible by 4 or 5\n",
    "print(\"Using while loop:\")\n",
    "print(\"List of numbers whose cubes are divisible by 4 or 5:\", cubes)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07a43911-f72b-4dbe-b9a8-5bac4e879141",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Both programs produce the same output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ff17102-2963-4c0d-ae58-fcdd54ca6f49",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q5. Write a program to filter count vowels in the below-given string.\n",
    "string = \"I want to become a data scientist\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5a34f8a7-18b8-4ad6-8739-6f67ac935cf9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Here's a Python program that counts the number of vowels in the given string:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "35b1a4d2-b521-4d8f-a2d2-ad5e4fedfde8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of vowels in the given string is: 12\n"
     ]
    }
   ],
   "source": [
    "string = \"I want to become a data scientist\"\n",
    "vowels = \"aeiou\"\n",
    "count = 0\n",
    "\n",
    "for char in string:\n",
    "    if char.lower() in vowels:\n",
    "        count += 1\n",
    "\n",
    "print(\"The number of vowels in the given string is:\", count)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dca9f608-257b-4aa7-9669-d7252ad2ee90",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f5514eb-4f39-4725-a89a-a31031141863",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf22b9fe-fe06-48cc-b490-d7e38386a3bb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
